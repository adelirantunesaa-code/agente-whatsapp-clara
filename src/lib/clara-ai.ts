interface UserSession {
  step: number
  data: {
    nome?: string
    telefone?: string
    cidade?: string
    projeto?: string
    ambiente?: string
    unidade?: string
  }
  lastActivity: Date
}

interface ProcessResult {
  message: string
  completed?: boolean
  leadData?: any
  forwardToUnit?: string
}

export class ClaraAI {
  private sessions: Map<string, UserSession> = new Map()

  constructor() {
    // Limpar sess√µes antigas a cada hora
    setInterval(() => {
      this.cleanOldSessions()
    }, 60 * 60 * 1000)
  }

  public async processMessage(chatId: string, message: string, contact: { name: string, number: string }): Promise<ProcessResult> {
    let session = this.sessions.get(chatId)
    
    if (!session) {
      session = {
        step: 0,
        data: {},
        lastActivity: new Date()
      }
      this.sessions.set(chatId, session)
    }

    session.lastActivity = new Date()

    // Processar baseado no step atual
    switch (session.step) {
      case 0:
        return this.handleWelcome(session)
      
      case 1:
        return this.handleUnitSelection(session, message)
      
      case 2:
        return this.handleNameCollection(session, message)
      
      case 3:
        return this.handlePhoneCollection(session, message, contact)
      
      case 4:
        return this.handleCityCollection(session, message)
      
      case 5:
        return this.handleProjectCollection(session, message)
      
      case 6:
        return this.handleEnvironmentCollection(session, message)
      
      case 7:
        return this.handleCalendarConfirmation(session, message)
      
      default:
        return this.handleCompletion(session)
    }
  }

  private handleWelcome(session: UserSession): ProcessResult {
    session.step = 1
    
    return {
      message: `Ol√°, seja bem-vindo(a) √† **Casa Demov√©lli**! ‚ú®

Eu sou a **Clara**, assistente virtual da nossa equipe.

Para come√ßar, me diga:
üìç Voc√™ prefere falar com a nossa unidade de **Ijui - RS** ou de **Catuipe - RS**?

Digite:
1Ô∏è‚É£ para Ijui
2Ô∏è‚É£ para Catuipe`
    }
  }

  private handleUnitSelection(session: UserSession, message: string): ProcessResult {
    const normalizedMessage = message.toLowerCase().trim()
    
    if (normalizedMessage.includes('ijui') || normalizedMessage === '1') {
      session.data.unidade = 'Ijui'
    } else if (normalizedMessage.includes('catuipe') || normalizedMessage === '2') {
      session.data.unidade = 'Catuipe'
    } else {
      return {
        message: `Por favor, escolha uma das op√ß√µes:

1Ô∏è‚É£ para **Ijui - RS**
2Ô∏è‚É£ para **Catuipe - RS**`
      }
    }

    session.step = 2
    
    return {
      message: `Perfeito! Vou te conectar com nossa unidade de **${session.data.unidade}**! üéâ

Agora preciso de algumas informa√ß√µes b√°sicas:

Qual √© o seu **nome completo**?`
    }
  }

  private handleNameCollection(session: UserSession, message: string): ProcessResult {
    if (message.length < 2) {
      return {
        message: 'Por favor, me informe seu nome completo:'
      }
    }

    session.data.nome = message.trim()
    session.step = 3

    return {
      message: `Prazer em conhec√™-lo(a), **${session.data.nome}**! üòä

Qual √© o seu **telefone de contato**? 
(confirme se este n√∫mero do WhatsApp est√° correto)`
    }
  }

  private handlePhoneCollection(session: UserSession, message: string, contact: { name: string, number: string }): ProcessResult {
    // Se o usu√°rio confirmar que √© o mesmo n√∫mero
    if (message.toLowerCase().includes('sim') || message.toLowerCase().includes('este') || message.toLowerCase().includes('correto')) {
      session.data.telefone = contact.number
    } else {
      // Extrair n√∫mero da mensagem
      const phoneRegex = /[\d\s\(\)\-\+]+/g
      const phoneMatch = message.match(phoneRegex)
      
      if (phoneMatch) {
        session.data.telefone = phoneMatch[0].trim()
      } else {
        session.data.telefone = message.trim()
      }
    }

    session.step = 4

    return {
      message: `Telefone registrado: **${session.data.telefone}** ‚úÖ

De qual **cidade** voc√™ est√° falando?`
    }
  }

  private handleCityCollection(session: UserSession, message: string): ProcessResult {
    session.data.cidade = message.trim()
    session.step = 5

    return {
      message: `Cidade registrada: **${session.data.cidade}** üìç

Voc√™ j√° possui um **projeto com arquiteto(a)** ou deseja que nossa equipe desenvolva um **novo projeto exclusivo** para voc√™?

Digite:
1Ô∏è‚É£ J√° tenho projeto com arquiteto
2Ô∏è‚É£ Preciso de um novo projeto Demov√©lli`
    }
  }

  private handleProjectCollection(session: UserSession, message: string): ProcessResult {
    const normalizedMessage = message.toLowerCase().trim()
    
    if (normalizedMessage.includes('tenho') || normalizedMessage === '1') {
      session.data.projeto = 'J√° tenho projeto com arquiteto'
    } else if (normalizedMessage.includes('novo') || normalizedMessage.includes('preciso') || normalizedMessage === '2') {
      session.data.projeto = 'Preciso de um novo projeto Demov√©lli'
    } else {
      return {
        message: `Por favor, escolha uma das op√ß√µes:

1Ô∏è‚É£ J√° tenho projeto com arquiteto
2Ô∏è‚É£ Preciso de um novo projeto Demov√©lli`
      }
    }

    session.step = 6

    return {
      message: `Projeto: **${session.data.projeto}** üèóÔ∏è

Qual **ambiente** voc√™ deseja planejar?

1Ô∏è‚É£ Cozinha
2Ô∏è‚É£ Sala  
3Ô∏è‚É£ Quarto
4Ô∏è‚É£ Banheiro
5Ô∏è‚É£ Escrit√≥rio
6Ô∏è‚É£ Outro`
    }
  }

  private handleEnvironmentCollection(session: UserSession, message: string): ProcessResult {
    const normalizedMessage = message.toLowerCase().trim()
    
    const environments = {
      '1': 'Cozinha',
      '2': 'Sala',
      '3': 'Quarto', 
      '4': 'Banheiro',
      '5': 'Escrit√≥rio',
      '6': 'Outro'
    }

    // Verificar se √© um n√∫mero
    if (environments[normalizedMessage as keyof typeof environments]) {
      session.data.ambiente = environments[normalizedMessage as keyof typeof environments]
    } else {
      // Verificar se cont√©m palavra-chave
      for (const [key, value] of Object.entries(environments)) {
        if (normalizedMessage.includes(value.toLowerCase())) {
          session.data.ambiente = value
          break
        }
      }
      
      // Se n√£o encontrou, usar a resposta como est√°
      if (!session.data.ambiente) {
        session.data.ambiente = message.trim()
      }
    }

    session.step = 7

    return {
      message: `Ambiente: **${session.data.ambiente}** üè†

Deseja que eu registre um **aviso para nossa equipe** entrar em contato e agendar uma visita √† loja/f√°brica?

Digite:
‚úÖ Sim, quero que entrem em contato
‚ùå N√£o, apenas registrar os dados`
    }
  }

  private handleCalendarConfirmation(session: UserSession, message: string): ProcessResult {
    const normalizedMessage = message.toLowerCase().trim()
    const wantsContact = normalizedMessage.includes('sim') || normalizedMessage.includes('‚úÖ') || normalizedMessage.includes('quero')

    session.step = 8

    const leadData = {
      ...session.data,
      data: new Date().toISOString(),
      status: 'novo',
      wantsContact
    }

    // Limpar sess√£o
    this.sessions.delete(session.data.telefone || '')

    return {
      message: `Obrigada pelas informa√ß√µes, **${session.data.nome}**! üéâ

J√° registrei seus dados e vou encaminhar para a nossa unidade de **${session.data.unidade}**.

${wantsContact ? 
  'Nossa equipe foi notificada e entrar√° em contato em breve para agendar sua visita! üìÖ' : 
  'Seus dados foram registrados com sucesso! üìù'
}

Em breve, um de nossos especialistas da Casa Demov√©lli entrar√° em contato para dar continuidade ao seu projeto. ‚ù§Ô∏è

Tenha um √≥timo dia!`,
      completed: true,
      leadData,
      forwardToUnit: session.data.unidade
    }
  }

  private handleCompletion(session: UserSession): ProcessResult {
    return {
      message: `Ol√°! Seu atendimento j√° foi finalizado. 

Se precisar de um novo atendimento, digite qualquer mensagem para come√ßar novamente! üòä`
    }
  }

  private cleanOldSessions(): void {
    const now = new Date()
    const maxAge = 2 * 60 * 60 * 1000 // 2 horas

    for (const [chatId, session] of this.sessions.entries()) {
      if (now.getTime() - session.lastActivity.getTime() > maxAge) {
        this.sessions.delete(chatId)
      }
    }
  }
}